rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if the request is from an authenticated user
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Function to check if user has admin role
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Function to check if user has dealer role
    function isDealer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'dealer';
    }
    
    // Function to check if user has farmer role
    function isFarmer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'farmer';
    }
    
    // User profile rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin(); // Only admin can delete users
    }
    
    // Dealer profile rules
    match /dealers/{dealerId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(dealerId) || isAdmin();
      allow delete: if isOwner(dealerId) || isAdmin();
    }
    
    // Farmer profile rules
    match /farmers/{farmerId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(farmerId) || isAdmin();
      allow delete: if isOwner(farmerId) || isAdmin();
    }
    
    // Product rules
    match /products/{productId} {
      // Anyone authenticated can read products
      allow read: if isAuthenticated();
      
      // Only users with dealer role can create/update/delete products
      allow create: if isAuthenticated() && request.resource.data.dealerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.dealerId == request.auth.uid;
    }
    
    // Connection rules
    match /connections/{connectionId} {
      // Allow any authenticated user to read connections
      allow read: if isAuthenticated();
      
      // Allow create if authenticated
      allow create: if isAuthenticated();
      
      // Allow update if user is part of the connection
      allow update: if isAuthenticated() && 
        (resource.data.dealerId == request.auth.uid || 
         resource.data.farmerId == request.auth.uid);
         
      // Allow delete if user is part of the connection
      allow delete: if isAuthenticated() && 
        (resource.data.dealerId == request.auth.uid || 
         resource.data.farmerId == request.auth.uid);
    }
    
    // Invitation code rules
    match /invitations/{invitationId} {
      // Allow anyone authenticated to read invitations
      allow read: if isAuthenticated();
      
      // Allow any authenticated user to create invitations (we'll check role in app)
      allow create: if isAuthenticated();
      
      // Only the creator can update or delete
      allow update, delete: if isAuthenticated() && resource.data.dealerId == request.auth.uid;
    }
    
    // Rate update rules
    match /rateUpdates/{updateId} {
      // Anyone authenticated can read rate updates
      allow read: if isAuthenticated();
      
      // Only authenticated users can create rate updates (role checked in app)
      allow create: if isAuthenticated() && request.resource.data.dealerId == request.auth.uid;
      
      // Only the creator can modify or delete
      allow update, delete: if isAuthenticated() && resource.data.dealerId == request.auth.uid;
    }
    
    // Dealer-specific collections
    match /dealerFarmers/{farmerId} {
      allow read, write: if isAuthenticated();
    }
    
    match /dealerProducts/{productId} {
      allow read, write: if isAuthenticated();
    }
    
    match /dealerOrders/{orderId} {
      allow read, write: if isAuthenticated();
    }
    
    match /dealerInvitations/{invitationId} {
      allow read, write: if isAuthenticated();
    }
    
    match /dealerRateUpdates/{rateId} {
      allow read, write: if isAuthenticated();
    }
    
    match /dealerTransactions/{transactionId} {
      allow read, write: if isAuthenticated();
    }
    
    match /dealerProfiles/{profileId} {
      allow read, write: if isAuthenticated();
    }
    
    // Farmer-specific collections
    match /farmerDealers/{dealerId} {
      allow read, write: if isAuthenticated();
    }
    
    match /farmerProfiles/{profileId} {
      allow read, write: if isAuthenticated();
    }
    
    match /farmerBatches/{batchId} {
      allow read, write: if isAuthenticated();
    }
    
    match /farmerTransactions/{transactionId} {
      allow read, write: if isAuthenticated();
    }

    // Admin Posts and Guides rules
    match /adminPosts/{postId} {
      // Everyone can read published posts (including non-authenticated users for home page)
      allow read: if true;
      
      // Temporarily allow all authenticated users to create posts for debugging
      // TODO: Change back to isAdmin() once admin role is confirmed
      allow create, update, delete: if isAuthenticated();
    }
    
    // Admin Posts Comments rules
    match /adminPosts/{postId}/comments/{commentId} {
      // Everyone can read comments
      allow read: if isAuthenticated();
      
      // Authenticated users can create comments
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Users can update/delete their own comments, admins can delete any
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Inventory Management rules
    match /inventory/{itemId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isDealer() || isAdmin();
    }
    
    // Order Requests rules  
    match /orderRequests/{orderId} {
      allow read: if isAuthenticated();
      allow create: if isFarmer();
      allow update: if isDealer() || isAdmin() || 
        (isFarmer() && resource.data.farmerId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Farmer Account Transactions rules
    match /farmerAccountTransactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create, update: if isDealer() || isAdmin() || 
        (isFarmer() && resource.data.farmerId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Batch Management rules
    match /batches/{batchId} {
      allow read: if isAuthenticated();
      allow create: if isFarmer();
      allow update: if isFarmer() && resource.data.farmerId == request.auth.uid;
      allow delete: if isFarmer() && resource.data.farmerId == request.auth.uid || isAdmin();
    }

    // Batch Performance rules
    match /batchPerformance/{performanceId} {
      allow read: if isAuthenticated();
      allow create, update: if isFarmer();
      allow delete: if isFarmer() || isAdmin();
    }

    // Default rule - allow reads for authenticated users, deny writes
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
  }
}
